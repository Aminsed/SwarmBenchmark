src:

src/main.cpp:

<src/main.cpp>
#include "FireflySwarm.h"
#include "ObjectiveFunction.h"
#include <iostream>
#include <chrono>

int main() {
    size_t swarmSize = 100;
    double searchSpaceMin = -5.0, searchSpaceMax = 5.0;
    int maxIterations = 1000;

    FireflySwarm swarm(swarmSize, searchSpaceMin, searchSpaceMax, ObjectiveFunction::rosenbrock);

    auto start = std::chrono::high_resolution_clock::now();

    swarm.optimize(maxIterations);

    auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);

    swarm.printBestFirefly();
    std::cout << "Execution Time: " << duration.count() << " milliseconds" << std::endl;

    return 0;
}

</src/main.cpp>

src/FireflySwarm.cpp:

<src/FireflySwarm.cpp>
#include "FireflySwarm.h"
#include <iostream>
#include <random>
#include <limits>

FireflySwarm::FireflySwarm(size_t size, double searchSpaceMin, double searchSpaceMax, std::function<double(double, double)> objectiveFunc)
    : objectiveFunc(objectiveFunc), searchSpaceMin(searchSpaceMin), searchSpaceMax(searchSpaceMax), dis(searchSpaceMin, searchSpaceMax) {
    std::random_device rd;
    gen.seed(rd());
    for (size_t i = 0; i < size; ++i) {
        fireflies.emplace_back(Firefly(randomDouble(), randomDouble()));
    }
}

void FireflySwarm::optimize(int maxIterations) {
    for (int iter = 0; iter < maxIterations; ++iter) {
        for (auto& firefly : fireflies) {
            firefly.updatePosition(fireflies, alpha, betaMin, gamma, searchSpaceMin, searchSpaceMax);
            firefly.evaluateIntensity(objectiveFunc);
        }
    }
}

void FireflySwarm::printBestFirefly() const {
    auto bestFirefly = std::max_element(fireflies.begin(), fireflies.end(),
                                        [](const Firefly& a, const Firefly& b) {
                                            return a.getIntensity() < b.getIntensity();
                                        });
    std::cout << "Best Firefly Position: (" << bestFirefly->getPosition().first << ", " << bestFirefly->getPosition().second << ")\n";
    std::cout << "Best Firefly Intensity: " << bestFirefly->getIntensity() << std::endl;
}

double FireflySwarm::randomDouble() {
    return dis(gen);
}

</src/FireflySwarm.cpp>

src/Firefly.cpp:

<src/Firefly.cpp>
#include "Firefly.h"
#include <random>

Firefly::Firefly(double x, double y) : position{x, y} {}

void Firefly::updatePosition(const std::vector<Firefly>& fireflies, double alpha, double betaMin, double gamma, double searchSpaceMin, double searchSpaceMax) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_real_distribution<> dis(-1.0, 1.0);

    for (const auto& other : fireflies) {
        double distance = std::sqrt(std::pow(position.first - other.getPosition().first, 2) +
                                    std::pow(position.second - other.getPosition().second, 2));
        double beta = betaMin * std::exp(-gamma * std::pow(distance, 2));
        position.first += beta * (other.getPosition().first - position.first) + alpha * dis(gen);
        position.second += beta * (other.getPosition().second - position.second) + alpha * dis(gen);

        // Clamp position within search space
        position.first = std::max(searchSpaceMin, std::min(position.first, searchSpaceMax));
        position.second = std::max(searchSpaceMin, std::min(position.second, searchSpaceMax));
    }
}

void Firefly::evaluateIntensity(std::function<double(double, double)> objectiveFunc) {
    intensity = 1.0 / (1.0 + objectiveFunc(position.first, position.second));
}

std::pair<double, double> Firefly::getPosition() const {
    return position;
}

double Firefly::getIntensity() const {
    return intensity;
}

</src/Firefly.cpp>


include:

include/FireflySwarm.h:

<include/FireflySwarm.h>
// FireflySwarm.h
#ifndef FIREFLY_SWARM_H
#define FIREFLY_SWARM_H

#include "Firefly.h"
#include <vector>
#include <functional>
#include <random>

class FireflySwarm {
public:
    FireflySwarm(size_t size, double searchSpaceMin, double searchSpaceMax, std::function<double(double, double)> objectiveFunc);
    void optimize(int maxIterations);
    void printBestFirefly() const;

private:
    std::vector<Firefly> fireflies;
    std::function<double(double, double)> objectiveFunc;
    double searchSpaceMin, searchSpaceMax;
    double alpha = 0.2, betaMin = 0.2, gamma = 1.0;

    std::mt19937 gen;
    std::uniform_real_distribution<double> dis;

    double randomDouble();
};

#endif // FIREFLY_SWARM_H

</include/FireflySwarm.h>

include/ObjectiveFunction.h:

<include/ObjectiveFunction.h>
#ifndef OBJECTIVE_FUNCTION_H
#define OBJECTIVE_FUNCTION_H

class ObjectiveFunction {
public:
    static double rosenbrock(double x, double y) {
        return 100 * std::pow(y - x * x, 2) + std::pow(1 - x, 2);
    }
};

#endif // OBJECTIVE_FUNCTION_H

</include/ObjectiveFunction.h>

include/Firefly.h:

<include/Firefly.h>
#ifndef FIREFLY_H
#define FIREFLY_H

#include <utility>
#include <cmath>
#include <vector>
#include <functional>

class Firefly {
public:
    Firefly(double x, double y);
    void updatePosition(const std::vector<Firefly>& fireflies, double alpha, double betaMin, double gamma, double searchSpaceMin, double searchSpaceMax);
    void evaluateIntensity(std::function<double(double, double)> objectiveFunc);

    std::pair<double, double> getPosition() const;
    double getIntensity() const;

private:
    std::pair<double, double> position;
    double intensity;
};

#endif // FIREFLY_H

</include/Firefly.h>


Makefile:

<Makefile>
# Makefile for PSO_Project

CXX = g++
CXXFLAGS = -std=c++17 -Iinclude -Wall
SRC_DIR = src
INCLUDE_DIR = include
OBJ_DIR = obj
BIN_DIR = bin

SOURCES = $(wildcard $(SRC_DIR)/*.cpp)
OBJECTS = $(SOURCES:$(SRC_DIR)/%.cpp=$(OBJ_DIR)/%.o)
EXECUTABLE = $(BIN_DIR)/fa

all: $(EXECUTABLE)

$(EXECUTABLE): $(OBJECTS) | $(BIN_DIR)
	$(CXX) $(CXXFLAGS) $^ -o $@

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp | $(OBJ_DIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(BIN_DIR) $(OBJ_DIR):
	mkdir -p $@

clean:
	rm -rf $(OBJ_DIR) $(BIN_DIR)

.PHONY: all clean

</Makefile>

